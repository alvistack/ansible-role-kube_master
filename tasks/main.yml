---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: include default variables
  include_vars: "../vars/main.yml"
  tags: kubernetes

- name: include release specific variables
  include_vars: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "../vars"
  ignore_errors: true
  tags: kubernetes

- name: include release specific tasks
  include_tasks: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "."
  ignore_errors: true
  tags: kubernetes

- name: prepare directories
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  loop:
    - { dest: "/etc/kubernetes" }
    - { dest: "/etc/kubernetes/addons" }
    - { dest: "/etc/kubernetes/manifests" }
    - { dest: "/etc/kubernetes/pki" }
    - { dest: "/etc/kubernetes/pki/etcd" }
  tags: kubernetes

- name: copy templates
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
  notify:
    - kubernetes | systemctl daemon-reload
    - kubernetes | systemctl restart
  tags: kubernetes

- name: generate apiserver-etcd-client private key
  openssl_privatekey:
    path: "/etc/kubernetes/pki/apiserver-etcd-client.key"
  when: ansible_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - kubernetes | systemctl restart
  tags: kubernetes

- name: generate apiserver-etcd-client csr
  openssl_csr:
    path: "/etc/kubernetes/pki/apiserver-etcd-client.csr"
    privatekey_path: "/etc/kubernetes/pki/apiserver-etcd-client.key"
    common_name: "{{ ansible_play_hosts[0] }}"
    subject:
      CN: "{{ ansible_play_hosts[0] }}"
    subject_alt_name: >-
      {%- for host in ansible_play_hosts -%}
      DNS:{{ host }},
      {%- endfor -%}
      DNS:localhost,
      {%- for host in ansible_play_hosts -%}
      IP:{{ hostvars[host]['ansible_default_ipv4']['address'] }},
      {%- endfor -%}
      IP:127.0.0.1
    key_usage:
      - digitalSignature
      - keyEncipherment
      - nonRepudiation
    extended_key_usage:
      - clientAuth
      - serverAuth
    basic_constraints: "CA:FALSE"
  when: ansible_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - kubernetes | systemctl restart
  tags: kubernetes

- name: generate apiserver-etcd-client ownca certificate
  openssl_certificate:
    path: "/etc/kubernetes/pki/apiserver-etcd-client.crt"
    csr_path: "/etc/kubernetes/pki/apiserver-etcd-client.csr"
    privatekey_path: "/etc/kubernetes/pki/apiserver-etcd-client.key"
    ownca_path: "/etc/kubernetes/pki/etcd/ca.crt"
    ownca_privatekey_path: "/etc/kubernetes/pki/etcd/ca.key"
    provider: "ownca"
  when: ansible_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - kubernetes | systemctl restart
  tags: kubernetes

- name: flush handlers
  meta: flush_handlers
  tags: kubernetes

- name: start services
  service:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
  loop:
    - { state: "started", name: "etcd" }
    - { state: "started", name: "docker" }
    - { state: "started", name: "kubelet" }
  changed_when: false
  ignore_errors: true
  tags: kubernetes

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.crt" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/etcd/ca.crt" }
    - { dest: "/etc/kubernetes/pki/etcd/ca.key", mode: "0600" }
  when: ansible_hostname == ansible_play_hosts[0]
  tags: kubernetes

- name: kubeadm config images pull
  shell: |
    set -o pipefail
    kubeadm config images pull
  args:
    executable: "/bin/bash"
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  ignore_errors: true
  tags: kubernetes

- name: kubeadm init
  shell: |
    set -o pipefail
    kubeadm init \
      --config=/etc/kubernetes/kubeadm.conf \
      --ignore-preflight-errors=all
  args:
    executable: "/bin/bash"
  when: ansible_hostname == ansible_play_hosts[0]
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  ignore_errors: true
  tags: kubernetes

- name: copy /root/.kube/config
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    remote_src: true
  loop:
    - { src: "/etc/kubernetes/admin.conf", dest: "/root/.kube/config", mode: "0600" }
  when: ansible_hostname == ansible_play_hosts[0]
  tags: kubernetes

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/pki/ca.crt" }
    - { dest: "/etc/kubernetes/pki/ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.pub", mode: "0600" }
  when: ansible_hostname == ansible_play_hosts[0]
  tags: kubernetes

- name: base64 encode certificates
  shell: |
    set -o pipefail
    tar zcfP - {{ _params | join(' ') }} | base64 -w 0
  vars:
    _params:
      - "/etc/kubernetes/pki/apiserver-etcd-client.crt"
      - "/etc/kubernetes/pki/apiserver-etcd-client.key"
      - "/etc/kubernetes/pki/ca.crt"
      - "/etc/kubernetes/pki/ca.key"
      - "/etc/kubernetes/pki/etcd/ca.crt"
      - "/etc/kubernetes/pki/etcd/ca.key"
      - "/etc/kubernetes/pki/front-proxy-ca.crt"
      - "/etc/kubernetes/pki/front-proxy-ca.key"
      - "/etc/kubernetes/pki/sa.key"
      - "/etc/kubernetes/pki/sa.pub"
  args:
    executable: "/bin/bash"
  delegate_to: "{{ ansible_play_hosts[0] }}"
  register: base64_encode_result
  changed_when: base64_encode_result is not succeeded
  tags: kubernetes

- name: base64 decode certificates
  shell: |
    set -o pipefail
    echo -n {{ base64_encode_result.stdout | quote }} | base64 -d | tar zx -C /
  args:
    executable: "/bin/bash"
  when: ansible_hostname != ansible_play_hosts[0]
  register: base64_decode_result
  changed_when: base64_decode_result is not succeeded
  tags: kubernetes

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.crt" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/ca.crt" }
    - { dest: "/etc/kubernetes/pki/ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/etcd/ca.crt" }
    - { dest: "/etc/kubernetes/pki/etcd/ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.pub", mode: "0600" }
  when: ansible_hostname != ansible_play_hosts[0]
  tags: kubernetes

- name: kubeadm init
  shell: |
    set -o pipefail
    kubeadm init \
      --config=/etc/kubernetes/kubeadm.conf \
      --ignore-preflight-errors=all
  args:
    executable: "/bin/bash"
  when: ansible_hostname != ansible_play_hosts[0]
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  ignore_errors: true
  tags: kubernetes

- name: copy /root/.kube/config
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    remote_src: true
  loop:
    - { src: "/etc/kubernetes/admin.conf", dest: "/root/.kube/config", mode: "0600" }
  when: ansible_hostname != ansible_play_hosts[0]
  tags: kubernetes
