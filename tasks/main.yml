---

# Copyright 2022 Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: include default variables
  ansible.builtin.include_vars: "../vars/main.yml"

- name: include release specific variables
  ansible.builtin.include_vars: "{{ _loop_var }}"
  loop: "{{ query('first_found', _params) }}"
  loop_control:
    loop_var: _loop_var
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "../vars"
      skip: true

- name: include release specific tasks
  ansible.builtin.include_tasks: "{{ _loop_var }}"
  loop: "{{ query('first_found', _params) }}"
  loop_control:
    loop_var: _loop_var
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "."
      skip: true

- name: prepare directories
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  loop:
    - { dest: "/etc/kubernetes/pki" }
    - { dest: "/etc/kubernetes/pki/etcd" }
  when: inventory_hostname  == ansible_play_hosts[0]
  delegate_to: "{{ groups['etcd'][0] }}"

- name: generate /etc/kubernetes/pki/apiserver-etcd-client.key
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  community.crypto.openssl_privatekey:
    path: "{{ kube_etcd.external.keyFile }}"
  when: inventory_hostname  == ansible_play_hosts[0]
  delegate_to: "{{ groups['etcd'][0] }}"

- name: generate /etc/kubernetes/pki/apiserver-etcd-client.csr
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  community.crypto.openssl_csr:
    path: "{{ kube_etcd.external.keyFile | splitext | first }}.csr"
    privatekey_path: "{{ kube_etcd.external.keyFile }}"
    common_name: "{{ kube_apiserver_csr_common_name }}"
    subject:
      CN: "{{ kube_apiserver_csr_common_name }}"
    subject_alt_name: "{{ kube_apiserver_csr_subject_alt_name }}"
    key_usage:
      - digitalSignature
      - keyEncipherment
      - nonRepudiation
    extended_key_usage:
      - clientAuth
      - serverAuth
    basic_constraints: "CA:FALSE"
  when: inventory_hostname  == ansible_play_hosts[0]
  delegate_to: "{{ groups['etcd'][0] }}"

- name: generate /etc/kubernetes/pki/apiserver-etcd-client.crt
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  community.crypto.x509_certificate:
    path: "{{ kube_etcd.external.certFile }}"
    csr_path: "{{ kube_etcd.external.keyFile | splitext | first }}.csr"
    privatekey_path: "{{ kube_etcd.external.keyFile }}"
    ownca_path: "{{ etcd_trusted_ca_file }}"
    ownca_privatekey_path: "{{ etcd_trusted_ca_file | splitext | first }}.key"
    provider: "ownca"
  when: inventory_hostname  == ansible_play_hosts[0]
  delegate_to: "{{ groups['etcd'][0] }}"

- name: copy /etc/kubernetes/pki/etcd/ca.crt
  ansible.builtin.copy:
    dest: "{{ item.dest }}"
    src: "{{ item.src }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    remote_src: true
    force: false
  loop:
    - { dest: "{{ kube_etcd.external.caFile }}", src: "{{ etcd_trusted_ca_file }}" }
  when: inventory_hostname  == ansible_play_hosts[0]
  delegate_to: "{{ groups['etcd'][0] }}"

- name: prepare files
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "{{ kube_etcd.external.caFile }}" }
    - { dest: "{{ kube_etcd.external.certFile }}" }
    - { dest: "{{ kube_etcd.external.keyFile }}", mode: "0600" }
  when: inventory_hostname  == ansible_play_hosts[0]
  delegate_to: "{{ groups['etcd'][0] }}"

- name: base64 encode
  ansible.builtin.shell:
    cmd: |
      set -euxo pipefail
      tar zcfP - {{ _params | join(' ') }} | base64 -w 0
  vars:
    _params:
      - "{{ kube_etcd.external.caFile }}"
      - "{{ kube_etcd.external.certFile }}"
      - "{{ kube_etcd.external.keyFile }}"
  args:
    executable: "/bin/bash"
  when: inventory_hostname == groups['kube_master'][0]
  delegate_to: "{{ groups['etcd'][0] }}"
  register: base64_encode_result
  changed_when: base64_encode_result is not succeeded

- name: base64 decode
  ansible.builtin.shell:
    cmd: |
      set -euxo pipefail
      echo -n {{ base64_encode_result.stdout | quote }} | base64 -d | tar zx -C /
  args:
    executable: "/bin/bash"
  when: inventory_hostname == ansible_play_hosts[0]
  register: base64_decode_result
  changed_when: base64_decode_result is not succeeded

- name: prepare directories
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  loop:
    - { dest: "/etc/kubernetes" }
    - { dest: "/etc/kubernetes/manifests" }
    - { dest: "/etc/kubernetes/pki" }
    - { dest: "/etc/kubernetes/pki/etcd" }

- name: copy templates
  ansible.builtin.template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
  notify:
    - kube_master | systemctl restart kubelet.service

- name: prepare files
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
  notify:
    - kube_master | systemctl restart kubelet.service

- name: systemctl start kubelet.service
  ansible.builtin.service:
    name: "kubelet.service"
    state: "started"
    enabled: true
  changed_when: false
  failed_when: false

- name: kubeadm init
  ansible.builtin.shell:
    cmd: |
      set -euxo pipefail
      kubeadm init \
        --config=/etc/kubernetes/kubeadm.conf \
        --ignore-preflight-errors=all
  args:
    executable: "/bin/bash"
  when: inventory_hostname == ansible_play_hosts[0]
  changed_when: false
  failed_when: false

- name: prepare files
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.crt" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/ca.crt" }
    - { dest: "/etc/kubernetes/pki/ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/etcd/ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.pub", mode: "0600" }
  when: inventory_hostname == ansible_play_hosts[0]

- name: base64 encode
  ansible.builtin.shell:
    cmd: |
      set -euxo pipefail
      tar zcfP - {{ _params | join(' ') }} | base64 -w 0
  vars:
    _params:
      - "/etc/kubernetes/pki/apiserver-etcd-client.crt"
      - "/etc/kubernetes/pki/apiserver-etcd-client.key"
      - "/etc/kubernetes/pki/ca.crt"
      - "/etc/kubernetes/pki/ca.key"
      - "/etc/kubernetes/pki/etcd/ca.crt"
      - "/etc/kubernetes/pki/front-proxy-ca.crt"
      - "/etc/kubernetes/pki/front-proxy-ca.key"
      - "/etc/kubernetes/pki/sa.key"
      - "/etc/kubernetes/pki/sa.pub"
  args:
    executable: "/bin/bash"
  when: inventory_hostname != ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  register: base64_encode_result
  changed_when: base64_encode_result is not succeeded

- name: base64 decode
  ansible.builtin.shell:
    cmd: |
      set -euxo pipefail
      echo -n {{ base64_encode_result.stdout | quote }} | base64 -d | tar zx -C /
  args:
    executable: "/bin/bash"
  when: inventory_hostname != ansible_play_hosts[0]
  register: base64_decode_result
  changed_when: base64_decode_result is not succeeded

- name: prepare files
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.crt" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/ca.crt" }
    - { dest: "/etc/kubernetes/pki/ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/etcd/ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.pub", mode: "0600" }
  when: inventory_hostname != ansible_play_hosts[0]

- name: kubeadm init
  ansible.builtin.shell:
    cmd: |
      set -euxo pipefail
      kubeadm init \
        --config=/etc/kubernetes/kubeadm.conf \
        --ignore-preflight-errors=all
  args:
    executable: "/bin/bash"
  when: inventory_hostname != ansible_play_hosts[0]
  changed_when: false
  failed_when: false

- name: kubeadm upgrade apply
  ansible.builtin.shell:
    cmd: |
      set -euxo pipefail
      kubeadm upgrade apply \
        --force \
        --certificate-renewal=true \
        --config=/etc/kubernetes/kubeadm.conf \
        --ignore-preflight-errors=all
  args:
    executable: "/bin/bash"
  changed_when: false
  failed_when: false

- name: flush handlers
  ansible.builtin.meta: flush_handlers
