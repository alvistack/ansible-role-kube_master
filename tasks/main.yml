---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: include default variables
  include_vars: "../vars/main.yml"

- name: include release specific variables
  include_vars: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "../vars"
  ignore_errors: true

- name: include release specific tasks
  include_tasks: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "."
  ignore_errors: true

- name: prepare directories
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  loop:
    - { dest: "/etc/kubernetes" }
    - { dest: "/etc/kubernetes/addons" }
    - { dest: "/etc/kubernetes/manifests" }
    - { dest: "/etc/kubernetes/pki" }
    - { dest: "/etc/kubernetes/pki/etcd" }

- name: copy templates
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
  notify:
    - kube_master | systemctl daemon-reload
    - kube_master | systemctl restart kubelet.service

- name: pip install
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  pip:
    name: "{{ item.name }}"
    state: "{{ item.state | default(None) or omit }}"
    version: "{{ item.version | default(None) or omit }}"
    extra_args: "--prefix=/usr/local --upgrade {{ item.extra_args | default(None) }}"
    executable: "pip3"
  loop: "{{ pip }}"
  register: result
  until: result is succeeded
  changed_when: result is not succeeded

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
  notify:
    - kube_master | systemctl daemon-reload
    - kube_master | systemctl restart kubelet.service

- name: flush handlers
  meta: flush_handlers

- name: systemctl start kubelet.service
  service:
    name: "kubelet.service"
    state: "started"
    enabled: true
  changed_when: false
  ignore_errors: true

- name: kubeadm init
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  shell: |
    set -euo pipefail
    kubeadm init \
      --config=/etc/kubernetes/kubeadm.conf \
      --ignore-preflight-errors=all
  args:
    executable: "/bin/bash"
  when: inventory_hostname == ansible_play_hosts[0]
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  ignore_errors: true

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.crt" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/ca.crt" }
    - { dest: "/etc/kubernetes/pki/ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/etcd/ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.pub", mode: "0600" }
  when: inventory_hostname == ansible_play_hosts[0]

- name: base64 encode
  shell: |
    set -euo pipefail
    tar zcfP - {{ _params | join(' ') }} | base64 -w 0
  vars:
    _params:
      - "/etc/kubernetes/pki/apiserver-etcd-client.crt"
      - "/etc/kubernetes/pki/apiserver-etcd-client.key"
      - "/etc/kubernetes/pki/ca.crt"
      - "/etc/kubernetes/pki/ca.key"
      - "/etc/kubernetes/pki/etcd/ca.crt"
      - "/etc/kubernetes/pki/front-proxy-ca.crt"
      - "/etc/kubernetes/pki/front-proxy-ca.key"
      - "/etc/kubernetes/pki/sa.key"
      - "/etc/kubernetes/pki/sa.pub"
  args:
    executable: "/bin/bash"
  when: inventory_hostname != ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  register: base64_encode_result
  changed_when: base64_encode_result is not succeeded

- name: base64 decode
  shell: |
    set -euo pipefail
    echo -n {{ base64_encode_result.stdout | quote }} | base64 -d | tar zx -C /
  args:
    executable: "/bin/bash"
  when: inventory_hostname != ansible_play_hosts[0]
  register: base64_decode_result
  changed_when: base64_decode_result is not succeeded

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.crt" }
    - { dest: "/etc/kubernetes/pki/apiserver-etcd-client.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/ca.crt" }
    - { dest: "/etc/kubernetes/pki/ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/etcd/ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.crt" }
    - { dest: "/etc/kubernetes/pki/front-proxy-ca.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.key", mode: "0600" }
    - { dest: "/etc/kubernetes/pki/sa.pub", mode: "0600" }
  when: inventory_hostname != ansible_play_hosts[0]

- name: kubeadm init
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  shell: |
    set -euo pipefail
    kubeadm init \
      --config=/etc/kubernetes/kubeadm.conf \
      --ignore-preflight-errors=all
  args:
    executable: "/bin/bash"
  when: inventory_hostname != ansible_play_hosts[0]
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  ignore_errors: true
